@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<EditForm FormName="testForm" Model="this" OnSubmit="FormSubmitted">
    <div class="form-group">
        <label for"socialSecurityNumber">Social Security Number:</label>
        <InputText @bind-Value="Soc" class="form-control" id="socialSecurityNumber" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>

    @if (Authenticated)
    {
        <div class="alert alert-success" role="alert">
            You are authenticated
        </div>
    }

    @if (Loading)
    {
        <div class="alert alert-success" role="alert">
            Loading...
        </div>
    }
</EditForm>
<table class="table">
    @if (recentAuthentications != null)
    {
        @foreach (var item in recentAuthentications)
        {
            <tr>
                <td>@item</td>
            </tr>
        }
    }
</table>

@code {
    [SupplyParameterFromForm]
    public string? Soc { get; set; }

    private bool Authenticated { get; set; }
    private bool Loading { get; set; }
    private List<string>? recentAuthentications { get; set; }

    private async Task GetListFromAPI()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"http://localhost:5177/Home/GetRecentAuthentications");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            recentAuthentications = JsonSerializer.Deserialize<List<string>>(content);
        }

        Console.WriteLine(content);
    }

    protected override async Task OnInitializedAsync()
    {
        await GetListFromAPI();
    }

    private async Task FormSubmitted(EditContext editContext)
    {
        Loading = true;
        StateHasChanged();
        await Task.Delay(500);
        await PollUser();
        Loading = false;
        StateHasChanged();
    }

    async Task PollUser()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post,
                $"http://localhost:5177/Home/AuthenticateUser?userIdentifier={Soc}");
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

            var client = ClientFactory.CreateClient();
            var response = await client.SendAsync(request);

            Authenticated = response.IsSuccessStatusCode;
            StateHasChanged();
        }
        catch(Exception e)
        {
            Console.WriteLine(e.ToString());
        }
    }

    public abstract class PagedResultBase
    {
        public int CurrentPage { get; set; }
        public int PageCount { get; set; }
        public int PageSize { get; set; }
        public int RowCount { get; set; }

        public int FirstRowOnPage
        {

            get { return (CurrentPage - 1) * PageSize + 1; }
        }

        public int LastRowOnPage
        {
            get { return Math.Min(CurrentPage * PageSize, RowCount); }
        }
    }

    public class PagedResult<T> : PagedResultBase where T : class
    {
        public IList<T> Results { get; set; }

        public PagedResult()
        {
            Results = new List<T>();
        }
    }
}